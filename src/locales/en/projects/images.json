{
  "id": "images",
  "title": "Image Search Gallery",
  "description": "Vanilla JavaScript application for searching and displaying images with gallery functionality",
  "stack": "Vanilla JavaScript, Pixabay API, SimpleLightbox, Notiflix, Parcel",
  "link": "https://github.com/VikaSemenchuk/goit-js-hw-11",
  "image": "/projects/images.png",
  "featured": true,
  "role": "Frontend Developer",
  "detailed": {
    "overview": "Image Search Gallery is a vanilla JavaScript application that allows users to search for high-quality images using the Pixabay API. The project features an infinite scroll mechanism with pagination, lightbox gallery functionality, and a responsive grid layout. Built without frameworks to demonstrate pure JavaScript skills and modern web development techniques.",
    "myRole": "Developed the complete frontend application using vanilla JavaScript and modern ES6+ features. Implemented API integration with Pixabay, created responsive UI components, integrated lightbox functionality, and ensured smooth user experience with loading states and error handling. Focused on clean, modular code architecture without using any JavaScript frameworks.",
    "technologies": {
      "frontend": [
        "Vanilla JavaScript ES6+ — modern JavaScript features and syntax",
        "HTML5 & CSS3 — semantic markup and modern styling",
        "SCSS — CSS preprocessor for better styling organization",
        "Parcel — modern build tool for bundling and optimization",
        "Modern Normalize — consistent cross-browser styling"
      ],
      "libraries": [
        "Axios — HTTP client for API requests",
        "SimpleLightbox — elegant lightbox gallery functionality",
        "Notiflix — user-friendly notifications and alerts",
        "Pixabay API — high-quality image search and retrieval"
      ],
      "architecture": [
        "Modular JavaScript architecture with ES6 classes",
        "Separation of concerns with dedicated service classes",
        "Event-driven programming with proper event handling",
        "Responsive grid layout with CSS Grid and Flexbox",
        "Progressive enhancement and graceful degradation"
      ]
    },
    "features": [
      {
        "title": "Image Search & Discovery",
        "description": "Search for high-quality images using keywords, view search results in a responsive grid layout, automatic image optimization and lazy loading, smooth infinite scroll for loading more results"
      },
      {
        "title": "Gallery Experience",
        "description": "Lightbox gallery with navigation controls, full-screen image viewing with zoom capabilities, keyboard navigation support, image metadata display (likes, views, downloads, comments)"
      },
      {
        "title": "User Interface & UX",
        "description": "Clean, responsive design that works on all devices, loading animations and user feedback, error handling with informative messages, smooth transitions and hover effects"
      },
      {
        "title": "Performance & Optimization",
        "description": "Efficient API calls with pagination, image lazy loading for better performance, debounced search to reduce API calls, optimized bundle size with Parcel"
      }
    ],
    "achievements": [
      "Built a fully functional image search application using only vanilla JavaScript",
      "Implemented efficient pagination system with infinite scroll functionality",
      "Created responsive design that adapts to all screen sizes and devices",
      "Integrated external API with proper error handling and rate limiting",
      "Achieved smooth user experience with loading states and animations",
      "Maintained clean, modular code structure without using any frameworks"
    ],
    "stats": {
      "jsClasses": "3",
      "apiEndpoints": "1",
      "responsiveBreakpoints": "3",
      "imagesPerPage": "40",
      "bundleSize": "< 100KB"
    },
    "codeExamples": {
      "apiService": "export default class ImagesApiService {\n  constructor() {\n    this.page = 1;\n    this.searchQuery = '';\n    this.perPage = 40;\n  }\n\n  async getImages() {\n    const URL = `${ENDPOINT}?key=${API_KEY}&q=${this.searchQuery}&image_type=photo&orientation=horizontal&safesearch=true&per_page=${this.perPage}&page=${this.page}`;\n    const response = await axios.get(URL);\n    this.nextPage();\n    return response.data;\n  }\n}",
      "loadMoreButton": "export default class LoadMoreBtn {\n  constructor({ selector, isHidden }) {\n    this.button = this.getButton(selector);\n    isHidden ? this.hide() : this.show();\n  }\n\n  disable() {\n    this.button.disabled = true;\n    this.button.textContent = 'Loading...';\n  }\n\n  enable() {\n    this.button.disabled = false;\n    this.button.textContent = 'Load more';\n  }\n}",
      "imageMarkup": "export function createMarkup({ webformatURL, largeImageURL, tags, likes, views, comments, downloads }) {\n  return `\n    <div class=\"photo-card\">\n      <a class=\"gallery__link\" href=\"${largeImageURL}\">\n        <img src=\"${webformatURL}\" alt=\"${tags}\" loading=\"lazy\" width=\"100%\" />\n      </a>\n      <div class=\"info\">\n        <p class=\"info-item\"><b>Likes</b> ${likes}</p>\n        <p class=\"info-item\"><b>Views</b> ${views}</p>\n        <p class=\"info-item\"><b>Comments</b> ${comments}</p>\n        <p class=\"info-item\"><b>Downloads</b> ${downloads}</p>\n      </div>\n    </div>\n  `;\n}"
    }
  }
}