{
  "id": "news",
  "title": "News Portal",
  "description": "Comprehensive news aggregation platform with category filtering and personalization features",
  "stack": "Vanilla JavaScript, SCSS, Parcel, New York Times API, OpenWeather API",
  "link": "https://github.com/Yermolinn/News",
  "image": "/projects/news.png",
  "featured": true,
  "role": "Frontend Developer & Team Contributor",
  "detailed": {
    "overview": "News Portal is a comprehensive news aggregation platform that fetches articles from The New York Times API. The project features category-based filtering, search functionality, weather integration, and personal reading lists. Built as a team project using vanilla JavaScript, it demonstrates advanced frontend development skills including API integration, local storage management, and responsive design.",
    "myRole": "Contributed as a frontend developer in a collaborative team environment. Developed key features including news rendering system, local storage management for favorites and read articles, responsive UI components, and API service integration. Participated in code reviews, collaborated on project architecture decisions, and ensured consistent code quality across the application.",
    "technologies": {
      "frontend": [
        "Vanilla JavaScript ES6+ — modern JavaScript with classes and modules",
        "SCSS — advanced CSS preprocessing with mixins and variables",
        "HTML5 — semantic markup with accessibility considerations",
        "Parcel — build tool for development and production optimization",
        "Flatpickr — elegant date picker for news filtering"
      ],
      "apis": [
        "New York Times API — comprehensive news data and search",
        "OpenWeather API — current weather and weekly forecasts",
        "Multiple NYT endpoints — articles, categories, and search functionality"
      ],
      "architecture": [
        "Modular JavaScript architecture with ES6 modules",
        "Component-based UI development without frameworks",
        "Local storage management for user preferences",
        "Responsive design with mobile-first approach",
        "Progressive web app features and offline capabilities"
      ]
    },
    "features": [
      {
        "title": "News Discovery & Search",
        "description": "Browse trending and popular news articles, search functionality across all articles, category-based filtering with dynamic loading, date-based filtering with calendar integration"
      },
      {
        "title": "Personalization Features",
        "description": "Add articles to personal favorites collection, track reading history with 'already read' indicators, organize read articles by date, persistent storage using localStorage"
      },
      {
        "title": "Enhanced User Experience",
        "description": "Weather widget with current conditions and weekly forecast, dark/light theme toggle with user preference storage, responsive design optimized for all devices, pagination for large article sets"
      },
      {
        "title": "Advanced Functionality",
        "description": "Multiple API integrations with error handling, lazy loading and infinite scroll, advanced filtering and sorting options, smooth animations and transitions"
      }
    ],
    "achievements": [
      "Contributed to a complex team project with multiple developers",
      "Implemented robust local storage system for user data persistence",
      "Created responsive design that works seamlessly across all device sizes",
      "Integrated multiple APIs with proper error handling and fallbacks",
      "Developed advanced pagination and filtering systems",
      "Maintained high code quality standards with consistent team practices"
    ],
    "stats": {
      "teamSize": "4+",
      "apiEndpoints": "8+",
      "components": "20+",
      "pages": "3",
      "features": "15+"
    },
    "codeExamples": {
      "apiService": "class FethNewsService {\n  constructor() {\n    this.section = '';\n    this.page = 0;\n  }\n\n  async fetchNews() {\n    const response = await fetch(\n      `${ENDPOINT_CATEGORY}${this.section}.json?${CATEGORY_PARAM}&offset=${this.page}&${CATEGORY_KEY}`\n    );\n    this.incrementPage();\n    return response;\n  }\n}",
      "localStorage": "const save = (key, value) => {\n  try {\n    const serializedState = JSON.stringify(value);\n    localStorage.setItem(key, serializedState);\n  } catch (error) {\n    console.error('Set state error: ', error.message);\n  }\n};\n\nconst load = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    console.error('Get state error: ', error.message);\n  }\n};",
      "weatherWidget": "async function weatherByGeo(position) {\n  const latitude = position.coords.latitude;\n  const longitude = position.coords.longitude;\n  \n  const url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${WEATHER_KEY}&units=metric`;\n  \n  const response = await fetch(url);\n  const data = await response.json();\n  \n  getWeatherRender(response, data);\n}"
    }
  }
}