{
  "id": "news",
  "title": "Новинний сервіс",
  "description": "Бекенд для сервісу з тваринами", 
  "stack": "Node.js, MongoDB, Mongoose, Swagger, Express, JWT",
  "link": "https://github.com/VikaSemenchuk/yourPets-backend",
  "image": "/projects/news.png",
  "featured": true,
  "role": "Тімлід та бекенд-розробниця",
  "detailed": {
    "overview": "YourPets — це повнофункціональна вебплатформа для пошуку та розміщення оголошень про всиновлення тварин, розроблена як випускний проєкт курсу GoIT. Проєкт об'єднує власників тварин, які шукають новий дім для своїх улюбленців, з тими, хто хоче всиновити тварину. Створено з використанням сучасних технологій і справжніх бізнес-вимог.",
    "myRole": "Керувала командою з 4+ розробників у фінальному проєкті GoIT, координувала роботу фронтенду та бекенду, відповідала за архітектуру проєкту, код-ревʼю, розподіл завдань і контроль якості. Особисто розробила бекенд: REST API, MongoDB, аутентифікація, інтеграція з Cloudinary. Робота виконувалась відповідно до реальних технічних вимог і стандартів індустрії.",
    "technologies": {
      "backend": [
        "Node.js + Express.js — серверна частина та API",
        "MongoDB + Mongoose — база даних та ODM",
        "JWT — аутентифікація та авторизація",
        "bcrypt — хешування паролів",
        "Cloudinary — зберігання та обробка зображень",
        "Multer — завантаження файлів"
      ],
      "architecture": [
        "RESTful API зі структурованими ендпоінтами",
        "Патерн Middleware для аутентифікації та валідації",
        "Централізована обробка помилок",
        "Пагінація для великих списків",
        "Пошук і фільтрація з гнучкими параметрами"
      ],
      "dataManagement": [
        "Агрегаційний конвеєр MongoDB для складних запитів",
        "Проєктування схем з валідацією та індексами",
        "Завантаження файлів з автоматичною оптимізацією зображень",
        "Зв'язки даних між користувачами, тваринами та оголошеннями"
      ]
    },
    "features": [
      {
        "title": "Система користувача",
        "description": "Реєстрація та авторизація за допомогою JWT, профіль користувача з можливістю редагування, завантаження та зміна аватарки, безпечне зберігання паролів з bcrypt"
      },
      {
        "title": "Управління оголошеннями",
        "description": "CRUD-операції з оголошеннями, категорії: продаж, віддаю безкоштовно, загублені-знайдені, фільтрація за статтю, віком, місцем, пошук за заголовком та типом тварини"
      },
      {
        "title": "Особисті тварини",
        "description": "Додавання власних тварин, фотогалерея, інформація про вік, тип, коментарі"
      },
      {
        "title": "Додаткові модулі",
        "description": "Каталог партнерських організацій, новини про тварин з пошуком, пагінація у всіх списках"
      }
    ],
    "achievements": [
      "Керувала командою з 4+ розробників, забезпечила узгодження фронтенду та бекенду",
      "Організувала процес код-ревʼю та встановила стандарти якості коду",
      "Спроєктувала архітектуру всього проєкту та розподілила завдання",
      "Реалізувала складну бекенд-систему з 15+ ендпоінтами та інтеграціями",
      "Дотрималась дедлайнів та успішно розгорнула продукт",
      "Створила детальну технічну документацію та специфікацію API"
    ],
    "stats": {
      "teamSize": "4+",
      "endpoints": "15+",
      "modules": "5",
      "filterParams": "8+",
      "coverage": "100%"
    },
    "codeExamples": {
      "aggregation": "const pipeline = [\n  { $match: { category: \"sell\", sex: \"female\" } },\n  { $skip: skip },\n  { $limit: limit },\n  { $sort: { createdAt: -1 } }\n];\n\nconst noticesList = await Notice.aggregate(pipeline);",
      "cloudinary": "const storage = new CloudinaryStorage({\n  cloudinary: cloudinary,\n  params: {\n    folder: \"petsshop\",\n    transformation: [{ width: 500, height: 500 }]\n  }\n});",
      "middleware": "const authenticate = async (req, res, next) => {\n  const { authorization = '' } = req.headers;\n  const [bearer, token] = authorization.split(' ');\n  \n  if (bearer !== 'Bearer' || !token) {\n    return res.status(401).json({ message: \"Not authorized\" });\n  }\n  \n  try {\n    const { id } = jwt.verify(token, process.env.JWT_SECRET);\n    const user = await User.findById(id);\n    req.user = user;\n    next();\n  } catch (err) {\n    res.status(401).json({ message: \"Invalid token\" });\n  }\n};"
    }
  }
}
