{
  "id": "news",
  "title": "Новинний портал",
  "description": "Всеосяжна платформа для агрегації новин з фільтрацією за категоріями та можливістю персоналізації",
  "stack": "Vanilla JavaScript, SCSS, Parcel, New York Times API, OpenWeather API",
  "link": "https://github.com/Yermolinn/News",
  "image": "/projects/news.png",
  "featured": true,
  "role": "Фронтенд-розробниця та учасниця команди",
  "detailed": {
    "overview": "Новинний портал — це масштабна платформа для агрегації новин, яка отримує статті через API The New York Times. У проєкті реалізовано фільтрацію за категоріями, пошук, інтеграцію з погодним сервісом та персональні списки читання. Це командний проєкт, створений з використанням ванільного JavaScript, що демонструє просунуті навички фронтенд-розробки: інтеграцію з API, керування localStorage та адаптивний дизайн.",
    "myRole": "Брала участь у розробці фронтенду в рамках командної роботи. Розробила основні функції, зокрема систему виведення новин, керування localStorage для обраного та прочитаного, адаптивні UI-компоненти, інтеграцію з API-сервісами. Участь у код-ревʼю, обговореннях архітектури проєкту та забезпечення якості коду.",
    "technologies": {
      "frontend": [
        "Vanilla JavaScript ES6+ — сучасний JS із класами та модулями",
        "SCSS — препроцесор CSS з міксинами та змінними",
        "HTML5 — семантична розмітка з урахуванням доступності",
        "Parcel — інструмент для збірки та оптимізації проєкту",
        "Flatpickr — елегантний календар для фільтрації новин"
      ],
      "apis": [
        "New York Times API — новини та пошук",
        "OpenWeather API — актуальна погода та прогноз",
        "Кілька NYT endpoint-ів — статті, категорії, пошук"
      ],
      "architecture": [
        "Модульна архітектура на базі ES6-модулів",
        "Розробка інтерфейсу без фреймворків",
        "Керування вподобаннями користувача через localStorage",
        "Адаптивний дизайн з підходом mobile-first",
        "PWA-функції та можливість офлайн-доступу"
      ]
    },
    "features": [
      {
        "title": "Пошук та перегляд новин",
        "description": "Перегляд популярних новин, пошук серед усіх статей, фільтрація за категоріями з динамічним завантаженням, вибір дати з календарем"
      },
      {
        "title": "Персоналізація",
        "description": "Додавання статей до улюблених, відстеження прочитаного з індикаторами, сортування прочитаних за датами, збереження даних через localStorage"
      },
      {
        "title": "Покращений користувацький досвід",
        "description": "Віджет погоди з актуальними умовами та прогнозом, перемикач темної/світлої теми з пам’яттю налаштувань, адаптивний дизайн, пагінація для великих наборів статей"
      },
      {
        "title": "Розширений функціонал",
        "description": "Інтеграція з кількома API з обробкою помилок, ліниве завантаження та нескінченна прокрутка, розширені опції фільтрації та сортування, плавні анімації"
      }
    ],
    "achievements": [
      "Успішна участь у командному проєкті з кількома розробниками",
      "Реалізовано надійну систему localStorage для збереження даних користувача",
      "Створено адаптивний інтерфейс для всіх типів пристроїв",
      "Інтегровано кілька API з fallback та обробкою помилок",
      "Розроблено ефективні системи пагінації та фільтрації",
      "Підтримка високих стандартів якості коду в команді"
    ],
    "stats": {
      "teamSize": "4+",
      "apiEndpoints": "8+",
      "components": "20+",
      "pages": "3",
      "features": "15+"
    },
    "codeExamples": {
      "apiService": "class FethNewsService {\n  constructor() {\n    this.section = '';\n    this.page = 0;\n  }\n\n  async fetchNews() {\n    const response = await fetch(\n      `${ENDPOINT_CATEGORY}${this.section}.json?${CATEGORY_PARAM}&offset=${this.page}&${CATEGORY_KEY}`\n    );\n    this.incrementPage();\n    return response;\n  }\n}",
      "localStorage": "const save = (key, value) => {\n  try {\n    const serializedState = JSON.stringify(value);\n    localStorage.setItem(key, serializedState);\n  } catch (error) {\n    console.error('Set state error: ', error.message);\n  }\n};\n\nconst load = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    console.error('Get state error: ', error.message);\n  }\n};",
      "weatherWidget": "async function weatherByGeo(position) {\n  const latitude = position.coords.latitude;\n  const longitude = position.coords.longitude;\n  \n  const url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${WEATHER_KEY}&units=metric`;\n  \n  const response = await fetch(url);\n  const data = await response.json();\n  \n  getWeatherRender(response, data);\n}"
    }
  }
}
